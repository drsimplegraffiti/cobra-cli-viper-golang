// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createNoteStmt, err = db.PrepareContext(ctx, createNote); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNote: %w", err)
	}
	if q.deleteAllCategoriesStmt, err = db.PrepareContext(ctx, deleteAllCategories); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllCategories: %w", err)
	}
	if q.deleteAllNotesStmt, err = db.PrepareContext(ctx, deleteAllNotes); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllNotes: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteNoteStmt, err = db.PrepareContext(ctx, deleteNote); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNote: %w", err)
	}
	if q.getCategoryByIdStmt, err = db.PrepareContext(ctx, getCategoryById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryById: %w", err)
	}
	if q.getNoteStmt, err = db.PrepareContext(ctx, getNote); err != nil {
		return nil, fmt.Errorf("error preparing query GetNote: %w", err)
	}
	if q.listCategoriesStmt, err = db.PrepareContext(ctx, listCategories); err != nil {
		return nil, fmt.Errorf("error preparing query ListCategories: %w", err)
	}
	if q.listNotesStmt, err = db.PrepareContext(ctx, listNotes); err != nil {
		return nil, fmt.Errorf("error preparing query ListNotes: %w", err)
	}
	if q.paginateNotesStmt, err = db.PrepareContext(ctx, paginateNotes); err != nil {
		return nil, fmt.Errorf("error preparing query PaginateNotes: %w", err)
	}
	if q.updateNoteContentStmt, err = db.PrepareContext(ctx, updateNoteContent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNoteContent: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createNoteStmt != nil {
		if cerr := q.createNoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNoteStmt: %w", cerr)
		}
	}
	if q.deleteAllCategoriesStmt != nil {
		if cerr := q.deleteAllCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllCategoriesStmt: %w", cerr)
		}
	}
	if q.deleteAllNotesStmt != nil {
		if cerr := q.deleteAllNotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllNotesStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteNoteStmt != nil {
		if cerr := q.deleteNoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNoteStmt: %w", cerr)
		}
	}
	if q.getCategoryByIdStmt != nil {
		if cerr := q.getCategoryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIdStmt: %w", cerr)
		}
	}
	if q.getNoteStmt != nil {
		if cerr := q.getNoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNoteStmt: %w", cerr)
		}
	}
	if q.listCategoriesStmt != nil {
		if cerr := q.listCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCategoriesStmt: %w", cerr)
		}
	}
	if q.listNotesStmt != nil {
		if cerr := q.listNotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNotesStmt: %w", cerr)
		}
	}
	if q.paginateNotesStmt != nil {
		if cerr := q.paginateNotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing paginateNotesStmt: %w", cerr)
		}
	}
	if q.updateNoteContentStmt != nil {
		if cerr := q.updateNoteContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNoteContentStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createCategoryStmt      *sql.Stmt
	createNoteStmt          *sql.Stmt
	deleteAllCategoriesStmt *sql.Stmt
	deleteAllNotesStmt      *sql.Stmt
	deleteCategoryStmt      *sql.Stmt
	deleteNoteStmt          *sql.Stmt
	getCategoryByIdStmt     *sql.Stmt
	getNoteStmt             *sql.Stmt
	listCategoriesStmt      *sql.Stmt
	listNotesStmt           *sql.Stmt
	paginateNotesStmt       *sql.Stmt
	updateNoteContentStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createCategoryStmt:      q.createCategoryStmt,
		createNoteStmt:          q.createNoteStmt,
		deleteAllCategoriesStmt: q.deleteAllCategoriesStmt,
		deleteAllNotesStmt:      q.deleteAllNotesStmt,
		deleteCategoryStmt:      q.deleteCategoryStmt,
		deleteNoteStmt:          q.deleteNoteStmt,
		getCategoryByIdStmt:     q.getCategoryByIdStmt,
		getNoteStmt:             q.getNoteStmt,
		listCategoriesStmt:      q.listCategoriesStmt,
		listNotesStmt:           q.listNotesStmt,
		paginateNotesStmt:       q.paginateNotesStmt,
		updateNoteContentStmt:   q.updateNoteContentStmt,
	}
}
